import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useForm } from "react-hook-form";
import { Input } from "~/components/input";
import { api } from "~/utils/api";

type FormData = {
  prompt: string;
};

export default function GeneratePage(): JSX.Element {
  const { register, handleSubmit, formState } = useForm<FormData>();

  //#region api

  /**
   * @description quando eu invoce ela ali em baixo, linha 25 eu posso chamar mutate/mutateAsync, se chamar mutate, trato a resposta igual faco no RTK,
   * dentro do useMutation aqui no topo, se usar o mutateAsync, Ã© uma promise
   */
  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess: (res) => console.log(res),
  });

  //#endregion api

  const onSubmit = (data: FormData) => {
    generateIcon.mutate({
      prompt: data.prompt,
    });
  };

  /**
   *
   * @obs legal o pattern, ele fez uma HOC para deixar generico o update dos campos do form
   * @returns
   */
  // function updateForm(key: string) {
  //   return function (e: React.ChangeEvent<HTMLInputElement>) {
  //     setForm((prev) => ({
  //       ...prev,
  //       [key]: e.target.value,
  //     }));
  //   };
  // }

  const session = useSession();

  const isUserLoggedIn = session.status === "authenticated";

  return (
    <>
      <Head>
        <title>Generate Icon</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen items-center justify-center">
        {!isUserLoggedIn ? (
          <button
            className="h-10 rounded bg-cyan-600 px-2 py-2"
            onClick={() => signIn()}
          >
            Login
          </button>
        ) : (
          <button
            className="h-10 rounded bg-cyan-600 px-2 py-2"
            onClick={() => signOut()}
          >
            Sign out
          </button>
        )}

        <form
          action=""
          className="flex flex-col gap-2"
          onSubmit={handleSubmit(onSubmit)}
        >
          <Input label="Entrada" name="prompt" register={register} />

          <button className="rounded bg-yellow-500 px-3 py-2 hover:bg-yellow-600">
            Enviar
          </button>
        </form>
      </main>
    </>
  );
}
