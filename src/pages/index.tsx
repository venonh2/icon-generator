import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { useMouse } from "@mantine/hooks";
import { api } from "~/utils/api";
import Image from "next/image";

import teste from "public/assets/home/isabela.jpg";
import { useEffect, useState } from "react";
import { easeInOut, useMotionValue, useTransform } from "framer-motion";
import { SpanTest } from "./../styles/styles";

import { motion } from "framer-motion";

import { cubicBezier, circOut, AnimatePresence } from "framer-motion";

interface Position {
  x: number[];
  y: number[];
}

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const [isVisible, setIsVisible] = useState<boolean>(false);
  const [movement, setMovement] = useState<Position>({
    x: [0],
    y: [0],
  });

  // const opacity = useTransform(x, [0, 1, 0], [0, 1, 0], {
  //   clamp: true,
  //   ease: circOut,
  // });

  /*   const { ref, x, y } = useMouse();

  const testX = useMotionValue(10);
  const testY = useTransform(testX, (value) => Math.sin(value / 10) * 50); */

  useEffect(() => {
    const container = document.getElementById("image-trail");

    container?.addEventListener("click", handler);
  }, []);
  console.log(movement);

  function handler(event) {
    const eventx = event.clientX;
    const eventy = event.clientY;

    console.log(eventx, eventy);

    setMovement((old) => ({
      x: [old?.x.pop(), eventx],
      y: [old?.y.pop(), eventy],
    }));
    setIsVisible(true);

    setTimeout(() => {
      setIsVisible(false);
    }, 1000);
  }

  return (
    <>
      <Head>
        <title>icons</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        id="image-trail"
        className="block min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]"
        style={{
          position: "relative",
          display: "block",
        }}
      >
        <AnimatePresence>
          {isVisible && (
            <motion.div
              id="eita"
              initial={{ opacity: 0 }}
              animate={{
                opacity: 1,
                ...movement,
                //translate,
              }}
              exit={{ opacity: 0 }}
              /*           style={{
            opacity: opacity,
          }} */
              transition={{ duration: 1 }}
            >
              <motion.img
                src={teste.src}
                alt="tesdssds"
                width={242}
                height={302}
                transition={{ duration: 1 }}
                /*         style={{
              position: "absolute",
              opacity: opacity,
            }} */
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              />
            </motion.div>
          )}
        </AnimatePresence>
      </main>
    </>
  );
}; //transform: translate(401.961px, 80.5px) rotate(-8deg) scale(0.95, 0.95)

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
